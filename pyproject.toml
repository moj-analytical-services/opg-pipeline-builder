[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "opg_pipeline_builder"
version = "0.3.1"
description = "Provides common re-usable components for building OPG data pipelines"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "awswrangler>=3.11.0",
    "boto3>=1.38.9",
    "croniter>=6.0.0",
    "data-linter>=6.3.0",
    "dataengineeringutils3>=1.4.3",
    "pyarrow>=18.1.0",
    "pydantic>=2.11.4",
    "pydbtools>=5.6.4",
    "s3fs>=0.4.2",
]

[tool.uv]
package = true

[dependency-groups]
dev = [
    "bandit>=1.8.3",
    "detect-secrets>=1.5.0",
    "duckdb>=1.2.2",
    "isort>=6.0.1",
    "mkdocs-material>=9.6.12",
    "mkdocstrings>=0.29.1",
    "mkdocstrings-python>=1.16.10",
    "moto>=5.1.4",
    "mypy>=1.15.0",
    "nox>=2025.5.1",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "ruff>=0.11.8",
    "safety>=3.2.9",
    "sqlglot>=26.16.4",
]

[tool.hatch]
sources = ["src"]

[tool.hatch.build]
packages = ["opg_pipeline_builder"]

[tool.pytest.ini_options]
addopts = "--cov=src"

[tool.lint.coverage.paths]
source = ["src"]

[tool.lint.coverage.run]
branch = true
source = ["src"]

[tool.lint.coverage.report]
show_missing = true

[tool.mypy]
strict = true
exclude = "migrations|tests|dist|build|typings"
explicit_package_bases = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true

[tool.lint.ruff]
select = [
    "A", # flake8-builtins (redefinition of bultins)
    "ANN", # flake8-annotations (type annotations are everywhere)
    "ARG", # flake8-unused-arguments (unused argument in function/method/class/lambda)
    "B", # flake8-bugbear (bugs & design problems)
    "B9", # flake8-bugbear strict (bugs & design problems)
    "BLE", # flake8-blind-except (no "except:" or "except Exception:")
    "COM", # flake8-commas (force trailing commas) -> unelegant
    "C4", # flake8-comprehensions (better list/set/dict comprehensions)
    "C90", # McCabe (code complexity)
    "D", # pydocstyle (documentation style)
    "DJ", # flake8-django (practices on Django)
    "DTZ", # flake8-datetimez (usage of unsafe naive datetime class)
    "E", # pycodestyle (violation of PEP-8)
    "EM", # flake8-errmsg (format error messages)
    "EXE", # flake8-executable (executable permissions and shebangs)
    "ERA", # eradicate (no commented-out code)
    "F", # pyflakes (invalid Python code)
    "FBT", # flake8-boolean-trap (misusage of booleans in function declaration & calls)
    "G", # flake8-logging-format (logging format strings)
    "I", # isort (import order)
    "ICN", # flake8-import-conventions (how certain packages should be imported or aliased)
    # "INP", # flake8-no-pep420 (ban PEP-420 implicit namespace packages) -> long live implicit namespace packages!
    "INT", # flake8-gettext (f-string resolved before function calls)
    "ISC", # flake8-implicit-str-concat (string literal concatenation)
    "N", # pep8-naming (naming conventions)
    "NPY", # NumPy-specific rules (e.g. deprecated-type-alias and legacy-random)
    "PD", # pandas-vet (pandas code)
    "PIE", # flake8-pie (miscellaneous lints)
    "PGH", # pygrep-hooks (miscellaneous lints, e.g. "use specific rule codes when using noqa")
    "PL", # Pylint (static code analyser)
    "PT", # flake8-pytest-style (style issues or inconsistencies with pytest-based tests)
    "PTH", # flake8-use-pathlib (use of functions that can be replaced by pathlib module)
    "PYI", # flake8-pyi (provide specializations for type hinting stub files)
    "Q0", # flake8-quotes (avoid escaping quotes)
    "RSE", # flake8-raise (improvements for raise statements)
    "RET", # flake8-return (check return values)
    "RUF", # ruff-specific rules
    "S", # flake8-bandit (security)
    "SIM", # flake8-simplify (tips to simplify the code)
    "SLF", # flake8-self (private member access)
    "T10", # flake8-debugger
    "T20", # flake8-print (no print nor pprint)
    "TCH", # flake8-type-checking (move import only intended for type-checking in "if TYPE_CHECKING" blocs)
    "TID", # flake8-tidy-imports (ordonated imports)
    "TRY", # tryceratops (exception handling AntiPatterns)
    "UP", # pyupgrade (upgrate syntax for newer versions of Python)
    "YTT", # flake8-2020 (misuse of sys.version and sys.version_info)
    "W" # pycodestyle (violation of PEP-8)
]
ignore = [
    "ANN101", # missing type annotation for self, but hinting self all the time is useless
    "ANN102", # missing type annotation for cls but hinting cls all the time is useless
    "ANN401", # disallows Any, but some elements should be Any when they are external
    "B024", # forces abstract classes to have at least one abstract method, but sometimes a class is virtually abstract
    "D100", # Missing docstring in public module
    "D105", # docstrings on magic methods, useless docstrings are well known
    "E501", # line size, but bug-bear already set it with a tolerance of 10% (B950)
    "UP007" # ignore or-wise typing for py3.9 support
]
exclude = ["typings", "playground"]

[tool.lint.ruff.per-file-ignores]
"docs/conf.py" = [
    "A001", # redefine some builtins (like "copyright") is OK in docs
]
"noxfile.py" = [
    "D402" # repeating the name of the function is OK for nox since it's to display it to the user
]
"tests/*" = [
    "ARG", # some arguments are unused in tests functions but useful (e.g. mocks)
    "S101", # asserts are OK for tests
    "SLF001" # accessing private members is OK for tests
]

[tool.lint.ruff.pydocstyle]
convention = "google"

[tool.lint.ruff.isort]
known-first-party = ["src"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.lint.isort]
profile = "black"
line_length = 88
known_first_party = ["src"]

[tool.lint.bandit]
skips = [
    "B101", # assert used
]
